# Alternative Dockerfile that uses pre-built frontend
# Usage: Build frontend locally first with `npm run build`, then docker build

# Stage 1: Copy pre-built frontend
FROM alpine:latest AS frontend-dist
WORKDIR /app/frontend
# Copy the pre-built frontend dist directory
COPY frontend/dist ./dist

# Stage 2: Build Backend
FROM golang:1.23-alpine AS backend-builder

WORKDIR /app/backend

# Copy backend source (includes vendor directory)
COPY backend/ ./

# Build the application using vendored dependencies
ENV GOTOOLCHAIN=local
RUN CGO_ENABLED=0 GOOS=linux go build -mod=vendor -a -installsuffix cgo -o server ./cmd/server

# Stage 3: Final Runtime Image
FROM alpine:latest

WORKDIR /root/

# Copy the backend binary from builder
COPY --from=backend-builder /app/backend/server .

# Copy frontend dist files (will be served by Go server)
COPY --from=frontend-dist /app/frontend/dist ./frontend/dist

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

CMD ["./server"]
